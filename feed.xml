<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://wott.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wott.io/" rel="alternate" type="text/html" /><updated>2019-10-02T13:45:11+00:00</updated><id>https://wott.io/feed.xml</id><title type="html">Web of Trusted Things</title><subtitle>WoTT is an automated, open-source public key infrastructure for connected hardware</subtitle><entry><title type="html">The significance of mTLS and why you should care about it</title><link href="https://wott.io/blog/thoughts/2019/09/09/what-is-mtls" rel="alternate" type="text/html" title="The significance of mTLS and why you should care about it" /><published>2019-09-09T08:00:00+00:00</published><updated>2019-09-09T08:00:00+00:00</updated><id>https://wott.io/blog/thoughts/2019/09/09/what-is-mtls</id><content type="html" xml:base="https://wott.io/blog/thoughts/2019/09/09/what-is-mtls">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Security in the IoT industry should also include the devices and not only the network or the cloud. Secure device management is all about machine identities and mTLS. Let us have a closer look at what mTLS does and why it is an essential parameter of IoT security.&lt;/p&gt;

&lt;h2 id=&quot;what-is-mtls&quot;&gt;What is mTLS?&lt;/h2&gt;
&lt;p&gt;mTLS  is a protocol that verifies the cryptographic identity of both endpoints before initiating communication, rather than just one. This cryptographic verification ensures that your messages and your connection are private, by ensuring that your device’s identity is authenticated and thus, trustworthy. mTLS is a two-way authentication, hence, the m which stands for mutual. Mutual transport layer security means that the two parties, the client and the server, authenticate each other at the same time. Some of the most popular and innovative technology companies out there use mTLS, including Google. Mutual TLS is state-of-the-art security contributing to building a robust security posture. To implement mTLS for IoT, one must set up a secure Public Key Infrastructure (PKI).  PKI is a useful set of security tools and processes needed to manage certificates. Everything related to the provision, management, distribution and revocation of certificates lies in the PKI.&lt;/p&gt;

&lt;h2 id=&quot;why-is-mtls-authentication-important&quot;&gt;Why is mTLS authentication important?&lt;/h2&gt;
&lt;p&gt;IoT security rests on the proper management of machine identities. But, machine identities can be efficiently managed with the use of digital certificates and mTLS. mTLS authentication validates the trust between your device and your server by simultaneously identifying each other as authentic. That is a proper way for connection and data transmission to be established. If the initial validation process fails, access is denied and a connection is not made.&lt;/p&gt;

&lt;h2 id=&quot;what-can-go-wrong-if-you-do-not-use-mtls&quot;&gt;What can go wrong if you do not use mTLS?&lt;/h2&gt;
&lt;p&gt;Not using mTLS may compromise your brand, your company, and your services in a multitude of ways. Consider a scenario where hackers compromise your device and use a commonly shared API key stored on disk to gain access to your back-end servers. This means that any sensitive information stored on your server might become accessible. Without mutual authentication there is no way to confirm client-side identity and isolate the compromised device. Imagine again, the occasion where without mTLS hackers take over a device and start sending falsified data. The data received and transmitted is altered, compromised and unreliable. But the users have no way of knowing this and they keep making critical decisions based on the compromised data received. They analyze metrics, they receive real-time data but…the integrity of the data is compromised so nothing can be trusted. What if the data compromised is related to health and smart healthcare devices? Or if it’s logistics-related data or even manufacturing and smart transportation data? What kind of a cataclysmic or disastrous impact will compromised data have? This is why in IoT infrastructure mTLS is an important piece of the security puzzle. IoT security is all about authenticating, trusting and securing the services provided.&lt;/p&gt;

&lt;h2 id=&quot;how-can-this-affect-you-and-your-company&quot;&gt;How can this affect you and your company?&lt;/h2&gt;
&lt;p&gt;For companies, the financial implications of security breaches are tremendous and difficult to recover from. It is not only the brand’s reputation plummeting but it is also the loss of customers and most importantly the huge fines incurred. The brand’s reliability is questioned and trust is lost.&lt;/p&gt;

&lt;h2 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h2&gt;
&lt;p&gt;Machine identity is a critical element of a robust security system for IoT.  Issuing x509 certificates to devices (and rotating them) provides cryptographically verifiable identities that can be used in mutual authentication through mTLS. This limits the chances of adversaries compromising your devices and keeps their hands off your credentials or confidential data. mTLS is a powerful way to enhance security posture, and ensure that your company is taking the necessary precautions to prevent a breach.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="thoughts" /><category term="Open Source" /><summary type="html">Introduction Security in the IoT industry should also include the devices and not only the network or the cloud. Secure device management is all about machine identities and mTLS. Let us have a closer look at what mTLS does and why it is an essential parameter of IoT security.</summary></entry><entry><title type="html">IoT Encryption Failures and how to avoid them</title><link href="https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them" rel="alternate" type="text/html" title="IoT Encryption Failures and how to avoid them" /><published>2019-08-28T12:00:00+00:00</published><updated>2019-08-28T12:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/28/iot-encryption-failures-and-how-to-avoid-them">&lt;h1 id=&quot;iot-encryption-failures-and-how-to-avoid-them&quot;&gt;IoT encryption failures and how to avoid them&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The stories of misconfigured security systems leading to leaks of client data are common. Take for example the Equifax data breach back in 2017. The vulnerability was detected with a great delay due to expired certificates. According to &lt;a href=&quot;https://www.venafi.com/blog/7-data-breaches-caused-human-error-did-encryption-play-role&quot;&gt;Venafi&lt;/a&gt; &lt;em&gt;The device inspecting encrypted traffic was misconfigured because of a digital certificate that had expired ten months earlier. This along with other oversights enabled a digital attacker to crack into Equifax’s system in mid-May and maintain their access until the end of July&lt;/em&gt;. Another example of how certificates can have a massive impact is the case of &lt;a href=&quot;https://www.zdnet.com/article/ericsson-expired-certificate-caused-o2-and-softbank-outages/&quot;&gt;Ericsson&lt;/a&gt;. An expired certificate of the Swedish Telecommunications Company caused a major outage in 11 countries in December 2018 with over 32 million users affected by it.&lt;/p&gt;

&lt;p&gt;The reality of the situation for IoT or any stack, is that there is no single solution, button or line of code to protect it in its whole. Devices use different platforms, servers, connectivity domains, and protocols. There is potential for failure which can lead to serious data-breaching issues. In the case of encryption, developers may be unwittingly more susceptible or prone to error than they realize.&lt;/p&gt;

&lt;h2 id=&quot;iot-encryption-failures&quot;&gt;IoT Encryption Failures&lt;/h2&gt;

&lt;p&gt;The problem with devices and networks does not always lie in not having encryption but in the way encryption is applied. Following security guidelines is a good step but like many security systems, the devil is in the details and being overzealous is a good thing in this case. Let’s take a closer look:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Misconfigured IoT encryption&lt;/strong&gt;. The added layers and the diversity of protocols in IoT create additional failure points where encryption can be incorrectly implemented (e.g. sensor to IoT device via SCADA &amp;gt; IoT device to IoT gateway via LPWAN &amp;gt; IoT gateway to MQTT broker via TCP/IP). A single hole caused by a configuration mistake on the platform, on the network, on the cloud or on the device may compromise the entire tech stack. A slight mistake could have tremendous consequences and land your company some unsavoury headlines in the press.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regulatory compliance alone does not protect devices&lt;/strong&gt;. Never assume that implementing a basic set of guidelines is enough. In fact, it is merely the beginning. Regulatory compliance for the sake of abiding to a set of standard rules is not security. What should be done is use those rules as a base and enhance them with IoT specific security solutions that suit your deployment. This way, security and IoT encryption are maximised on all layers and at all points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not keeping track of machine identity protection&lt;/strong&gt;. Consider the scale of managing a fleet of thousands of devices (millions are possible, but let’s not break our minds). Managing SSL/TLS certificates at IoT scale is a daunting task, particularly if you issue the certificates manually (which is why most fail to use it altogether). Imagine the workload and the time wasted on a process which could and should be automated. TLS protocols grant secure communication over a network (assuming properly implemented). Security best practice dictates that certificates should have a lifespan of a days or hours to mitigate the impact of a leak. This is where &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/22/wott-secures-the-internet-of-things&quot;&gt;automating TLS certificate and key-issuing&lt;/a&gt; comes handy. By automating the certificate-issuing process, we reduce the burden that developers would face and eliminate human error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poor Key Management&lt;/strong&gt;. Encryption keys are like passwords. Storing your keys on disk is not ideal.The only way to efficiently handle this situation is to have a Trusted Platform Module (TPM). TPM is a cryptographic Module which enhances computer security and boosts privacy. It is designed to ward off software compromising. Unfortunately this is still relatively rare outside of high-compliance devices largely due to the added complexity and added hardware components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using weak, vulnerable, unknown or untested cryptographic algorithms&lt;/strong&gt;. Encryption is performed based on ciphers, complex algorithms and best developed by mathematical sophisticates. Some companies or developers choose to build and use their own encryption algorithms. This is a risky practice, particularly if it is not updated or reviewed for a prolonged period. Moreover, encryption protocols should undergo rigorous peer review and audit as is done in &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;open source&lt;/a&gt; security tools. It is better and more secure to use the already-tested and secure algorithms which are available out there. Some of the most popular encryption algorithms are: RSA, Advanced Encryption Standard (AES) and ECDSA. These are updated and they evolve so that they can help fend off cyber-attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relying solely on cloud providers for securing your data&lt;/strong&gt;. Securing data on the cloud and opting for a trustworthy provider is essential yet, this is only one piece of the security puzzle. Admittedly, cloud providers are all doing a good job towards securing the data we all store in the cloud. This, however, does not mean that a data leak is not possible. The cloud only covers one area of your architecture and even on the cloud, there are settings that must be configured correctly by the customer. Do you really believe that a 3rd party service, even AWS is taking full responsibility for your entire stack? Will it matter when -your- client data is leaked? IoT encryption is not only about securing a certain layer or point in the architecture. It needs to be holistic and cover database to customer data, to identity and access management, and of course, down to the IoT device itself. In cases of organisations and enterprises, this is where &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/23/why-shift-left-security-is-relevant-for-iot&quot;&gt;DevSecOps&lt;/a&gt; can be of great help.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The complexity of the IoT ecosystem and the uniqueness of every deployment creates many potential IoT encryption failures and security failures in general. These mistakes are avoided only with the provision of easy-to-integrate IoT security solutions. We at &lt;a href=&quot;https://wott.io/&quot;&gt;Wott&lt;/a&gt; offer tools for developers to help harden the security of IoT devices and to fix vulnerabilities during the development process. We offer a seamless and easy-to-use solution which is open source, cloud-agnostic and integrates easily with most  common hardware and operating system providers so that your IoT infrastructure remains secure.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="Open Source" /><summary type="html">IoT encryption failures and how to avoid them</summary></entry><entry><title type="html">The Future of IoT</title><link href="https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot" rel="alternate" type="text/html" title="The Future of IoT" /><published>2019-08-16T13:00:00+00:00</published><updated>2019-08-16T13:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/16/the-future-of-iot">&lt;h1 id=&quot;the-future-of-iot&quot;&gt;The Future of IoT&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Future of IoT is both fascinating and challenging. As the number of connected devices is expected to triple by 2025, there are many significant questions and issues rising. Such as what does this mean for the Industry? What implications does this create?&lt;/p&gt;

&lt;p&gt;To start with, security is the primary concern. Smarter devices does not imply that security is smart too. On the contrary, the larger the number of distinct, non-interoperable devices connected, the larger the risk of a security breach - especially when security sits on the user’s network alone. In the era of Industry 4.0, as IoT expands into every aspect of our lives, managing the risk presented by these edge devices is a daunting task.&lt;/p&gt;

&lt;p&gt;But let us take a closer look at what the future of IoT will bring about, its aspiring achievements and significant challenges.&lt;/p&gt;

&lt;h2 id=&quot;the-future-of-iot-and-the-different-industries-achievements-and-challenges&quot;&gt;The Future of IoT and the different Industries: Achievements and Challenges&lt;/h2&gt;

&lt;h3 id=&quot;smart-transport&quot;&gt;Smart Transport&lt;/h3&gt;
&lt;p&gt;The Future of IoT is all about connected airports, seaports, train stations and roads, which will allow for seamless movement of goods and jetsetters alike. Freight will be shipped across countries and borders with more efficiency and greater visibility.&lt;/p&gt;

&lt;p&gt;This means that high-quality infrastructure and updated systems will keep all devices, vehicles and terminals continuously connected and informed about the latest data and conditions. This also means that the amount of data transmitted and received will be monumental.&lt;/p&gt;

&lt;p&gt;Now imagine a minor flaw in the infrastructure, a hiccup in security and you can understand the massive impact it might have on business continuity and more importantly on human life. The existence of the ‘future of IoT’ depends on data security being ongoing industry goal.&lt;/p&gt;

&lt;p&gt;But how can you make sure that security is not breached and important data is not stolen? We believe that in the future of IoT, security-by-design is the only solution. The only way to safely guarantee the secure transmission of mission critical data, across devices, networks and systems is to implement security into every endpoint. Security by obfuscation was a good option and worked well for more isolated systems. But widely used systems (like those deployed on the billions of edge devices, obviously) are too easy for hackers to access, understand and compromise. Security for IoT must work even if a hacker can compromise a device.&lt;/p&gt;

&lt;h3 id=&quot;smart-homes-smart-living-smart-mobility&quot;&gt;Smart Homes, Smart Living, Smart Mobility&lt;/h3&gt;
&lt;p&gt;Smart home devices will create an autonomous ecosystem of efficiency, sustainability and smarter solutions. Imagine a world where your Volkswagen can actually talk to your thermostat and let it know when to turn on the A/C. The vehicle itself will come with built-in, real-time data collectors, available to make decisions and choose what is best for the user.&lt;/p&gt;

&lt;p&gt;In the future of IoT, autonomous devices will have agency - they will be able to make decisions for the user and provide the best customised experience. But if your car is making decisions for you, should the software not be well-maintained and up to date? Should you not feel completely comfortable with it making all of your decisions? Updates and maintenance of software should be automated and regular.  Users can easily forget or ignore reminders to update devices. The future of IoT calls for a seamless solution that will guarantee the maintenance, updates and &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/22/wott-secures-the-internet-of-things&quot;&gt;security&lt;/a&gt; of IoT devices without burdening the end user.&lt;/p&gt;

&lt;h3 id=&quot;industrial-iot&quot;&gt;Industrial IoT&lt;/h3&gt;
&lt;p&gt;The integration of IoT into industrial processes opens up new levels of efficiency. This is where IoT can be most disruptive as enterprise employees with the word ‘digital’ or ‘innovation’ in their titles leverage their MBAs to prepare powerpoint presentations that will transform and propel business into the future. (I can’t help teasing the corporates sometimes.) In the coming years, even the most traditional of brands and companies will turn to IoT to upscale both their services and their profits.  According to &lt;a href=&quot;https://www.accenture.com/t20150523t023633z__w__/us-en/_acnmedia/accenture/conversion-assets/dotcom/documents/global/pdf/dualpub_11/accenture-driving-unconventional-growth-through-iiot.pdfla=en&quot;&gt;Accenture&lt;/a&gt; the IIoT market will reach $500 billion by 2020.&lt;/p&gt;

&lt;p&gt;Imagine then that a tiny misconfiguration in the tech stack or the cloud could have dramatic consequence to business continuity (just as Maersk). For us at WoTT, the future of IoT is all about foreseeing these pitfalls and preventing them. One of the most successful ways to reduce mistakes in security and software is by including developers in the design process. Developers should be present from the beginning and should play a significant role in the design of the IoT deployment.  Involving &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/23/why-shift-left-security-is-relevant-for-iot&quot;&gt;developers&lt;/a&gt; in the process will only secure the development even further and will save the industry a lot of money as the repairs after launching will be fewer and less costly.&lt;/p&gt;

&lt;h3 id=&quot;iot-and-healthcare&quot;&gt;IoT and Healthcare&lt;/h3&gt;
&lt;p&gt;From heart monitors to telemedicine and robotic surgery, edge devices can transform an industry that is stretched desperately thin. Remote health monitoring is a great solution delivering the best of science and technology to the remotest of places and even provide preventative care.&lt;/p&gt;

&lt;p&gt;With this in mind, how can we make sure that our valuable Healthcare related data is not compromised? For one, (you guessed it) security should be at the core of any device. It cannot be on the network alone, it must include the device itself and have multiple layers to prevent compromise.&lt;/p&gt;

&lt;h2 id=&quot;the-future-of-iot-as-we-see-it&quot;&gt;The Future of IoT as we see it&lt;/h2&gt;

&lt;p&gt;In the Future of IoT, privacy and security are fundamental parameters. One way to cope is to create open source solutions - a robust ecosystem of developer tools for &lt;a href=&quot;https://www.memfault.com&quot;&gt;bug fixes&lt;/a&gt;, remote management and security. Crowdsourcing knowledge and allowing more individuals to contribute to the security of the ecosystem and as we see it, a prerequisite to the future of IoT.  &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;Open source&lt;/a&gt; will pave the way to success with a common set of best practices and guidelines to foster interoperability - a key requirement for keeping up with the scale of managing connectivity at the edge.&lt;/p&gt;

&lt;p&gt;We at &lt;a href=&quot;https://wott.io/&quot;&gt;WoTT&lt;/a&gt; envision the Future of IoT is full of &lt;a href=&quot;https://wott.io/blog/news/2019/06/20/why-we-are-doing-what-we-do&quot;&gt;neat use cases&lt;/a&gt; powered by trusted devices, fully-integrated and supported by a crowdsourced network of contributors where our solutions marvel at helping you make the most of IoT.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="Open Source" /><summary type="html">The Future of IoT</summary></entry><entry><title type="html">IoT Security Issues and Challenges</title><link href="https://wott.io/blog/news/thoughts/2019/08/12/iot-security-Issues-and-challenges" rel="alternate" type="text/html" title="IoT Security Issues and Challenges" /><published>2019-08-12T13:00:00+00:00</published><updated>2019-08-12T13:00:00+00:00</updated><id>https://wott.io/blog/news/thoughts/2019/08/12/iot-security-Issues-and-challenges</id><content type="html" xml:base="https://wott.io/blog/news/thoughts/2019/08/12/iot-security-Issues-and-challenges">&lt;h2 id=&quot;iot-security-issues-and-challenges&quot;&gt;IoT Security Issues and Challenges&lt;/h2&gt;
&lt;p&gt;IoT Security issues are quite a challenge for this burgeoning industry. There is a growing number of devices, applications and systems which turn to IoT. This helps them to upscale their efficiency and their services and to make life easier for users. So let us take a closer look at the industry.&lt;/p&gt;

&lt;h3 id=&quot;the-internet-of-things&quot;&gt;The Internet of Things&lt;/h3&gt;
&lt;p&gt;This buzzing, new industry sports cutting-edge technology. It enhances digitisation while at the same time it produces demanding challenges.
But before we delve into these in more detail, let us have a look at the state of IoT at the moment.&lt;/p&gt;

&lt;p&gt;According to a report by &lt;a href=&quot;https://iot-analytics.com/state-of-the-iot-update-q1-q2-2018-number-of-iot-devices-now-7b/&quot;&gt;IoT Analytics&lt;/a&gt; there are over 17 Billion devices connected to IoT. As one can understand, this number will only multiply in the coming years. The devices connected to IoT range greatly.  From Smart Home Automation devices, routers, printers to thermostats, refrigerators and cameras. Amazon Alexa and Google Assistant too. Smart locks, smart watches, ATMs, industrial machines, manufacturing processes and applications. Smart clothing items, drones, solar panels, automobile navigation, infotainment systems, advanced medical devices.  The list is long and it is updated as more types of devices, gadgets and applications are added.&lt;/p&gt;

&lt;p&gt;Regardless of the technology or the number  of IoT devices, the main challenge remains one: That is &lt;em&gt;Security&lt;/em&gt; and everything about it.&lt;/p&gt;

&lt;h2 id=&quot;iot-security-issues&quot;&gt;IoT Security Issues&lt;/h2&gt;

&lt;h3 id=&quot;unsecured-devices&quot;&gt;Unsecured Devices&lt;/h3&gt;
&lt;p&gt;With the number of connected devices on the rise, consumers play an integral part in Security. Manufacturers upon launching a device, should equip it with a strong default password. They should also advise consumers on how to make their lives with smart gadgets more secure. Most consumers are not well-informed about the significance of changing the default password on their devices. Thus, the responsibility falls on the manufacturers to maintain a more secure network and to educate the consumers of the necessary steps they need to take.&lt;/p&gt;

&lt;h3 id=&quot;data-privacy&quot;&gt;Data Privacy&lt;/h3&gt;
&lt;p&gt;Nowadays, power plants, manufacturing processes and healthcare devices connect to IoT. These critical infrastructures constitute IoT a treasure trove of data. One mistake in security and precious confidential data might end up in the hands of criminals.  One leak in Privacy and hackers can gain access to confidential, private data. Data transmission and reception as well as maintaining the privacy of the users must be a top priority of the IoT industry. With so many applications, gadgets and processes connected, even lives can be at stake. This is one of the reasons why &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;Security-by-design&lt;/a&gt; is a great solution, particularly  for Enterprise IoT.&lt;/p&gt;

&lt;h3 id=&quot;insufficient--testing-and-updating&quot;&gt;Insufficient  Testing and Updating&lt;/h3&gt;
&lt;p&gt;As the number of connected devices is in constant rise, one of the major IoT security issues is keeping the devices updated. Though IoT is a highly-digitised industry, it is amazing to see that the devices used, do not receive many updates.  All the gadgets, applications and devices need to be sufficiently tested before launched. Then, they should be updated frequently, with patches and releases enhancing their security.&lt;/p&gt;

&lt;h3 id=&quot;iot-malware-and-ransomware&quot;&gt;IoT Malware and Ransomware&lt;/h3&gt;
&lt;p&gt;Some digitised appliances and some gadgets too, have the same computer power as a tablet. This means that they can be compromised, hijacked by hackers. Then, they can become a powerful weapon which hackers can use to compromise the system in many ways. At WoTT, we believe that IoT security is a complicated issue. It can not be achieved by obfuscation; on the contrary, it should be &lt;a href=&quot;https://wott.io/blog/thoughts/2019/06/25/why-open-source-solutions-are-critical-for-IoT&quot;&gt;Open-Source&lt;/a&gt; where knowledge of operations is shared and put to good use.&lt;/p&gt;

&lt;p&gt;One of the ways IoT devices can be used by hackers is to cause DDoS attacks. Hackers hijack computers and add them to a network of malicious botnets conducting DDoS attacks. DDoS attacks result when multiple compromised systems flood the resources of a targeted system with traffic. Thus, as it is easy for computers to be hijacked and participate in a DDoS attack without the owner knowing, so are smart devices, appliances and gadgets too. They can be compromised and used by a hacker.&lt;/p&gt;

&lt;h3 id=&quot;so-what-can-go-wrong-with-iot-security-issues&quot;&gt;So what can go wrong with IoT Security issues?&lt;/h3&gt;
&lt;p&gt;Assuming that there is a compromise of some sort in an IoT device or gadget many things can go wrong. First, you may no longer have control of it - or &lt;em&gt;lose availability&lt;/em&gt;. This has a financial impact, of course. Yet, there are many other parameters and ways in which a hijacked device can affect you, your life and everything around it. Hackers may turn your IoT device into a spam machine sending spam emails to everyone - &lt;em&gt;damaging your reputation&lt;/em&gt;.  They can transmit false signals, such as a false battery charging report - &lt;em&gt;disrupting your operation&lt;/em&gt;.  Worse yet, hackers can compromise entire networks to interfere with entire manufacturing plants, energy grids or fleets of vehicles. What is truly scary is the potential for loss of life when thinking of medical devices or heavy machinery.&lt;/p&gt;

&lt;h3 id=&quot;a-solution-to-the-iot-security-issues&quot;&gt;A solution to the IoT security issues&lt;/h3&gt;
&lt;p&gt;We at WoTT aim at making the IoT industry a web of trusted devices, applications and gadgets. A place where security is of primary importance. WoTT is the go-to place as the network of connected devices grows.  Security, knowledge and collaboration between devices, manufacturers and developers is our philosophy. So, we bring to you a developer first &lt;a href=&quot;https://wott.io/&quot;&gt;Solution&lt;/a&gt; to manage certificates and credentials, and find vulnerabilities in your build.&lt;/p&gt;</content><author><name>Nikoletta Triantafyllopoulou</name></author><category term="[&quot;news&quot;, &quot;thoughts&quot;]" /><category term="Open Source" /><summary type="html">IoT Security Issues and Challenges IoT Security issues are quite a challenge for this burgeoning industry. There is a growing number of devices, applications and systems which turn to IoT. This helps them to upscale their efficiency and their services and to make life easier for users. So let us take a closer look at the industry.</summary></entry><entry><title type="html">Using WoTT to Secure a Paho MQTT Client</title><link href="https://wott.io/blog/tutorials/2019/07/19/paho-mqtt" rel="alternate" type="text/html" title="Using WoTT to Secure a Paho MQTT Client" /><published>2019-07-19T13:00:00+00:00</published><updated>2019-07-19T13:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/07/19/paho-mqtt</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/07/19/paho-mqtt">&lt;h1 id=&quot;using-wott-to-secure-a-connection-from-a-paho-mqtt-client-to-an-mqtt-server-mosquitto-mqtt-example-included&quot;&gt;Using WoTT to Secure a Connection from a Paho MQTT Client to an MQTT Server (Mosquitto MQTT Example included)&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In a previous &lt;a href=&quot;https://wott.io/blog/tutorials/2019/07/15/mosquitto-mqtt&quot;&gt;example&lt;/a&gt; we discussed how to secure connections between an Mosquitto MQTT broker and the Mosquitto client. In that there are several different brokers for an MQTT brokers, there are also several client implementations for the MQTT protocol. There are several libraries available for multiple MQTT clients in various programming languages. This example looks at Paho, a project that was adopted into the Eclipse Foundation much like Mosquitto, that specifically implements a client for MQTT. We will be looking at the Python implementation of Paho. Although you can use any other MQTT server, we already have a Mosquitto server from our previous example that we can use for this tutorial.&lt;/p&gt;

&lt;p&gt;Here we will show how simple it is to secure a Mosquitto server and a non-Mosquitto client (Paho) using WoTT. The principles shown here can be applied to any MQTT client accessing a Mosquitto server.&lt;/p&gt;

&lt;p&gt;You will need two devices, either a Debian machine or Raspberry Pi. In a set up where you have both, it is preferable to set up the Debian machine as your server device. Both these devices will need to have the &lt;a href=&quot;https://wott.io/documentation/getting-started&quot;&gt;WoTT Agent&lt;/a&gt; installed and &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/debian/&quot;&gt;Docker CE&lt;/a&gt; installed. Note installation instructions for Docker on Pi is different so refer to the link above for appropriate instructions.&lt;/p&gt;

&lt;p&gt;This example contains code snippets. We recommend you clone our &lt;a href=&quot;https://github.com/WoTTsecurity/examples&quot;&gt;examples&lt;/a&gt; repository by doing the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/WoTTsecurity/examples.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to manually install the files that you need. Refer to our other code snippet examples (&lt;a href=&quot;https://wott.io/blog/tutorials/2019/06/27/adafruit-io&quot;&gt;Adafruit IO&lt;/a&gt;, &lt;a href=&quot;https://wott.io/blog/tutorials/2019/06/16/simple-webapp&quot;&gt;Simple WebApp&lt;/a&gt;, etc) for instructions to do this. However, if you are going to be looking at our other tutorials in the future we recommend you have the repository readily available.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-server-mosquitto&quot;&gt;Setting up the server (Mosquitto)&lt;/h2&gt;

&lt;p&gt;Please refer to our &lt;a href=&quot;(https://wott.io/blog/tutorials/2019/07/15/mosquitto-mqtt)&quot;&gt;Mosquitto MQTT example&lt;/a&gt; for in depth information on how to set up the server. If you are familiar with this example and want to just quickly ‘set up and go,’ do the following:&lt;/p&gt;

&lt;p&gt;Navigate to the directory where you have cloned our ‘examples’ repository:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd examples/mosquitto-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alter the ACL file &lt;code class=&quot;highlighter-rouge&quot;&gt;permissions.acl&lt;/code&gt; with your WoTT device details for the relevant permissions (remember we want to grant some access to your client device). To find the WoTT Device ID:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wott-agent whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are still using the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;/wott/temperature&lt;/code&gt; to publish and subscribe messages to and from.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-client-paho&quot;&gt;Setting up the client (Paho)&lt;/h2&gt;

&lt;p&gt;This is where our instructions differ from setting up the Mosquitto client. It is not significantly more complicated but Paho has a different set up. First, you will need to have Paho on your system.
Navigate to the directory containing our &lt;code class=&quot;highlighter-rouge&quot;&gt;examples&lt;/code&gt; respository. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;paho-mqtt-client&lt;/code&gt; folder like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd examples
$ cd paho-mqtt-client
$ pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two files in this folder - a &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file and the client itself &lt;code class=&quot;highlighter-rouge&quot;&gt;paho-connect-wott.py&lt;/code&gt;. The above command installs the version of the Paho client needed for this example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can use whatever version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; tool you have.&lt;/p&gt;

&lt;p&gt;Now that Paho is installed, you need to set your server variables for Paho to connect to. Do the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export MQTT_SERVER=ServerDeviceID.d.wott.local
$ export MQTT_TOPIC=my/topic
$ export MQTT_PORT=8333 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where for this example &lt;code class=&quot;highlighter-rouge&quot;&gt;my/topic&lt;/code&gt; refers to the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;wott/temperature&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;my/topic&lt;/code&gt; will default to &lt;code class=&quot;highlighter-rouge&quot;&gt;wott/temperature&lt;/code&gt; if not specified otherwise).&lt;/p&gt;

&lt;p&gt;Feel free to try and run the client now using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python3 paho-connect-wott.py&lt;/code&gt;. You will notice that this fails. 
This is because we haven’t established a route for the client to connect to the server device through - we need to alter the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file on the client to add a route to the server. In the Mosquitto example, we set this up using Docker, but here you will need to manually add the hostname. So, in whatever text editor you prefer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo $EDITOR /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see a file containing something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1    localhost
127.0.1.1    your_machine's_name
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Add your server device’s IP followed by the ‘domain’ that you will be calling it by- the device’s WoTT ID (do not remove the other ones!) like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IP.Of.Docker.Server  ServerDeviceID.d.wott.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save and exit. Now you have a route to the server!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we have discussed finding your IP in previous examples. There are several commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr show&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;, etc. Take your pick as long as you choose the &lt;code class=&quot;highlighter-rouge&quot;&gt;inet&lt;/code&gt; address for your server IP.&lt;/p&gt;

&lt;p&gt;Now we can run the client using Python 3. The output will look like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo python3 paho-connect-wott.py
rc: 0
Subscribed: (1,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you check your server, you will see that it has registered a connection from the Paho client.&lt;/p&gt;

&lt;h2 id=&quot;finishing-notes&quot;&gt;Finishing notes&lt;/h2&gt;

&lt;p&gt;You are now securely set up with a Paho MQTT client. The client accesses the server through the server’s CN (common name). This is how the client verifies the server (this is defined in our &lt;code class=&quot;highlighter-rouge&quot;&gt;mosquitto.conf&lt;/code&gt; file for the Mosquitto server if you can recall) unlike a typical browser where there is only one-way verification. You can essentially think of it as the client matching the server name to that which is one the ACL file (permissions).&lt;/p&gt;

&lt;p&gt;The example we provided contains a simple subscriber. Please experiment with a Paho publisher yourself and other clients. We want you to feel free to break our code! It’s the best way to develop.&lt;/p&gt;

&lt;p&gt;Hopefully you’ve now grasped the basic concepts of setting up at least two different types of MQTT server/client with the cryptographic identity that WoTT provides so you don’t actually need to worry about the details of the security itself.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Using WoTT to Secure a Connection from a Paho MQTT Client to an MQTT Server (Mosquitto MQTT Example included)</summary></entry><entry><title type="html">Connecting Edge IoT devices with Kubernetes</title><link href="https://wott.io/blog/tutorials/2019/07/18/edge-to-kubernetes" rel="alternate" type="text/html" title="Connecting Edge IoT devices with Kubernetes" /><published>2019-07-18T08:00:00+00:00</published><updated>2019-07-18T08:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/07/18/edge-to-kubernetes</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/07/18/edge-to-kubernetes">&lt;h1 id=&quot;bridging-edge-iot-devices-with-kubernetes&quot;&gt;Bridging Edge IoT devices with Kubernetes&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Medium to Expert&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;https://wott.io/blog/tutorials/2019/07/15/mtls-with-nginx&quot;&gt;last blog post&lt;/a&gt;, we covered how to configure Nginx to use Mutual TLS (mTLS). This illustrated how mTLS can both simplify the back-end, while also make it more secure. In this article, we will take this one step further and integrate this with &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;. If you haven’t read the last blog post, that would be a good place to start.&lt;/p&gt;

&lt;p&gt;Please note that this article assumes that you are familiar with Kubernetes and understands the fundamentals.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;Before we dive into the actual configuration, we will assume that you have the following already configured:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Kubernetes cluster (d’oh!)&lt;/li&gt;
  &lt;li&gt;A valid SSL certificate for your domain
    &lt;ul&gt;
      &lt;li&gt;You can use &lt;a href=&quot;https://github.com/jetstack/cert-manager/&quot;&gt;cert-manager&lt;/a&gt; from our friends at &lt;a href=&quot;https://www.jetstack.io/&quot;&gt;Jetstack&lt;/a&gt; if you want to use Let’s Encrypt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://github.com/kubernetes/ingress-nginx&quot;&gt;Nginx Ingress Controller&lt;/a&gt; configured with the SSL certificate(s)
    &lt;ul&gt;
      &lt;li&gt;It is recommended that you use the &lt;a href=&quot;https://github.com/helm/charts/tree/master/stable/nginx-ingress&quot;&gt;Nginx Helm Chart&lt;/a&gt; for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Familiarity with &lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;With the cluster and ingress controller up and running, you should be able to route traffic to your services. If you’re not familiar with this part, we recommend that you take a look at this Katacoda’s &lt;a href=&quot;https://www.katacoda.com/courses/kubernetes/create-kubernetes-ingress-routes&quot;&gt;Kubernetes Ingress training scenario&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before proceeding further, we will assume that you now have an Nginx Ingress controller deployed, with some kind of service behind it that you can route traffic to in the ‘foobar’ namespace. In the example below, we will call this service ‘foobar,’ and it listens on port 80.&lt;/p&gt;

&lt;h2 id=&quot;configuring-mtls-for-the-ingress-controller&quot;&gt;Configuring mTLS for the Ingress Controller&lt;/h2&gt;

&lt;p&gt;Because the Nginx Ingress controller is already configured to support mTLS and subsequently does all the heavy-lifting, all we really need to do is to tell our Ingress object to use the built-in functionalities.&lt;/p&gt;

&lt;p&gt;Before we do this however, we first need to download the WoTT CA and upload this to the cluster. Otherwise Nginx will not be able to verify the certificate.&lt;/p&gt;

&lt;p&gt;To do this, let’s assume that our application will run in the ‘foobar’ namespace within the cluster.&lt;/p&gt;

&lt;p&gt;Create the namespace if it doesn’t already exist:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl create namespace foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download the WoTT CA certificate bundle:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -s https://api.wott.io/v0.2/ca-bundle | \
  jq -r .ca_bundle &amp;gt; wott-ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upload the CA certificate to the cluster:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl create secret generic wott-ca \
  -n foobar \
  --from-file=ca.crt=wott-ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can verify that we the secret was properly created by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get secrets -n foobar
NAME                  TYPE                                  DATA      AGE
[...]
wott-ca               Opaque                                1         4s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With CA in place, we can move on to configuring the &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingress object&lt;/a&gt;. The Ingress object is responsible for informing the Ingress Controller that it should route traffic addressed to a given hostname to a particular service.&lt;/p&gt;

&lt;p&gt;Here’s an example of the YAML file for such configuration (here we are using cert-manager for the SSL configuration):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    certmanager.k8s.io/acme-challenge-type: http01
    certmanager.k8s.io/issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: &quot;true&quot;
    nginx.ingress.kubernetes.io/auth-tls-secret: foobar/wott-ca
    nginx.ingress.kubernetes.io/auth-tls-verify-client: &quot;on&quot;
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: &quot;2&quot;
  name: mtls-test
  namespace: api
spec:
  rules:
  - host: mtls-test.example.com
    http:
      paths:
      - backend:
          serviceName: foobar
          servicePort: 80
        path: /?(.*)
  tls:
  - hosts:
    - mtls-test.example.com
    secretName: le-secret-mtls-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The secret for mTLS lies in the various ‘auth-tls’ annotations that we have above. These annotations tell Nginx to configure auth-tls (i.e. mTLS) for this endpoint.&lt;/p&gt;

&lt;p&gt;We can now leverage the HTTP headers that Nginx is passing on to the appserver(s) just like we did in our &lt;a href=&quot;https://wott.io/blog/tutorials/2019/07/15/mtls-with-nginx&quot;&gt;Nginx mTLS blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The two headers that you likely want to use are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP_SSL_CLIENT_VERIFY&lt;/li&gt;
  &lt;li&gt;HTTP_SSL_CLIENT_SUBJECT_DN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have this all configured, you can now communicate directly from your IoT devices to your Kubernetes cluster using mTLS and the WoTT certificate as your identity:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo curl \
  --key /opt/wott/certs/client.key \
  --cert /opt/wott/certs/client.crt \
  https://mtls-test.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hopefully this all made sense. If not, feel free to reach out to use on Twitter at &lt;a href=&quot;https://twitter.com/wottsecurity&quot;&gt;@WoTTSecurity&lt;/a&gt;.&lt;/p&gt;</content><author><name>Viktor Petersson</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Bridging Edge IoT devices with Kubernetes</summary></entry><entry><title type="html">Using WoTT to Secure Access to a Mosquitto MQTT Server</title><link href="https://wott.io/blog/tutorials/2019/07/15/mosquitto-mqtt" rel="alternate" type="text/html" title="Using WoTT to Secure Access to a Mosquitto MQTT Server" /><published>2019-07-15T17:00:00+00:00</published><updated>2019-07-15T17:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/07/15/mosquitto-mqtt</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/07/15/mosquitto-mqtt">&lt;h1 id=&quot;using-wott-to-cryptographically-secure-access-between-a-mosquitto-brokered-mqtt-client-and-server&quot;&gt;Using WoTT to Cryptographically Secure Access Between a Mosquitto Brokered MQTT Client and Server&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Mosquitto is a lightweight message broker for MQTT. MQTT itself is a pub-sub messaging protocol that is particularly popular amongst IoT applications due to its optimisation for high-latency networks. Together, they are effective for IoT usage being low-power to run and adding a layer of security to IoT devices.&lt;/p&gt;

&lt;p&gt;By default, the connection between a Mosquitto run client and server is unencrypted. Mosquitto does have provisions for securing messages between client and server that are very easy to configure, although most of these options involve a password file. There is a second option you can use (and the one we will be using in this example) through an ACL file - or Access Control List. The ACL is essentially a list of permissions that are granted to particular users or processes. Keeping passwords in a system like this can be dangerous particularly when used without TLS as anyone with access to the network can potentially find the password. As you can imagine, this is a huge breach of security. We circumvent this by using WoTT’s unique device ID to secure the connection instead through the ACL file.&lt;/p&gt;

&lt;p&gt;Here we’ll look at using WoTT’s unique device ID to authenticate and secure access for a Mosquitto brokered MQTT protocol. Essentially we are identifying the devices cryptographically thus removing the need for usernames and passwords. This is done by assigning specific permissions to allowed users (or devices) according to their WoTT device ID which is recorded in the ACL file. In this example, we are securing messages to an MQTT temperature topic hosted by the Mosquitto server.&lt;/p&gt;

&lt;p&gt;You will need two WoTT devices with the &lt;a href=&quot;https://wott.io/documentation/getting-started&quot;&gt;WoTT Agent&lt;/a&gt; installed. We recommend that at least one of these is a Debian machine for the server (although two Pis is fine).&lt;/p&gt;

&lt;p&gt;For this example, you will need Docker CE and therefore a distribution of Raspbian or Debian. Installation instructions for Docker &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/debian/&quot;&gt;here&lt;/a&gt;.
Installation of Docker CE is a different on Rasbperry Pis. More information is in the Docker installation link above.&lt;/p&gt;

&lt;p&gt;We will also be asking you to clone our code snippets repository from Github, so ensure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; on your system. Otherwise you can opt to use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to manually clone the required files (see previous code snippet examples on how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; for installation). For this tutorial, we will assume you have cloned our repo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; while not required, familiarity with Mosquitto config files may also be helpful. If not, don’t worry; but we encourage you to play around with our included files.&lt;/p&gt;

&lt;h2 id=&quot;getting-set-up&quot;&gt;Getting set up&lt;/h2&gt;

&lt;p&gt;Before we start, please clone our &lt;a href=&quot;https://github.com/WoTTsecurity/examples&quot;&gt;repository&lt;/a&gt; with WoTT’s example code snippets onto your devices:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/WoTTsecurity/examples.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you navigate inside this folder, you will find a few folders. For this example we are interested in ‘mosquitto-client’ and ‘mosquitto-server.’&lt;/p&gt;

&lt;p&gt;Alternatively, you can download the files needed using &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; followed by the raw output of the files if you prefer. In this case download the client files on the client device and server files on the server device.&lt;/p&gt;

&lt;p&gt;If you are using a Debian machine and a Rasberry Pi, we reccommend setting up your server on the Debian machine with the Pi acting as the client as this will be the most common form of setup.&lt;/p&gt;

&lt;p&gt;We will now break down the tutorial into client and server.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-server&quot;&gt;Setting up the server&lt;/h2&gt;

&lt;p&gt;First, we need to set up and establish our server with Mosquitto. For this we will need a Mosquitto configuration file. Information regarding set up of the &lt;a href=&quot;https://mosquitto.org/man/mosquitto-conf-5.html&quot;&gt;configuaration files&lt;/a&gt; is readily available if you wish to peruse through this yourself. Assuming you have the repository cloned, navigate to the directory on your server device (if you have a Debian machine and a Pi, the Debian machine):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd examples
$ cd mosquitto-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;running &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; you will notice there are 3 files including a &lt;code class=&quot;highlighter-rouge&quot;&gt;mosquitto.conf&lt;/code&gt; file. This contains the information we need to set up our Mosquitto server. By default we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;acl_file&lt;/code&gt; enabled. This is to secure access to the server later, however if you want to test this without the ACL configured, just find and comment out this line in the config:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acl_file /mosquitto/config/permission.acl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that &lt;em&gt;all&lt;/em&gt; messages to the server are now accepted. This may be useful to you for testing when establishing connection between your devices although we reccommend keeping the file as is.&lt;/p&gt;

&lt;p&gt;In this example, we provide the ACL file for you to configure with WoTT Device details to secure this. This file is in the same directory as &lt;code class=&quot;highlighter-rouge&quot;&gt;permissions.acl.&lt;/code&gt;
Open this in your favourite text editor. You will notice it is filled with comments. Each block refers to a type of permissions you can associate with a device followed by the topic that you are giving permissions for. For this example, our messaging topic is &lt;code class=&quot;highlighter-rouge&quot;&gt;wott/temperature&lt;/code&gt; and can receive messages of temperature.&lt;/p&gt;

&lt;p&gt;Replace the relevant fields with the details of your specific WoTT device. If you do not know the Device ID of your devices, simply run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wott-agent whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will print the unique ID of your device. Remember to use the correct subscribing/publishing device for your purposes. For this example, feel free to use the first block to give read and write permissions to your publishing device (the device &lt;em&gt;sending&lt;/em&gt; messages); or assign it write only permissions (this is technically the most secure option). Give permissions to the subscribing device as well. With the ACL set up, you can now start up your server with the third file in the directory, a simple bash script &lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;. In the same directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should get an output similar to this :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1563214210: mosquitto version 1.6.3 starting
1563214210: Config loaded from /mosquitto/config/mosquitto.conf.
1563214210: Opening ipv4 listen socket on port 8883.
1563214210: Opening ipv6 listen socket on port 8883.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you may need to prefix with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; if your permissions are denied. If it still does not work, ensure the file is executable.&lt;/p&gt;

&lt;p&gt;The server is now up and running. We can now move onto the client.&lt;/p&gt;

&lt;h2 id=&quot;connecting-the-client&quot;&gt;Connecting the client&lt;/h2&gt;

&lt;p&gt;On your client device, assuming you have our examples repository downloaded, navigate to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd examples
$ cd mosquitto-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are 3 files of note in this directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;pub.sh&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sub.sh&lt;/code&gt;, and, &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;. You do not need to alter any of these files for this example. There is an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; file containing client set up instructions although these are also contained in this document. If you choose to use these files in the future, you can refer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; instead of this tutorial for quick reference.&lt;/p&gt;

&lt;p&gt;We will familiarise you with the files in the meantime.&lt;/p&gt;

&lt;h3 id=&quot;subscribing&quot;&gt;Subscribing&lt;/h3&gt;

&lt;p&gt;First, we need to set up the Docker container with the Dockerfile. The file contains installation instructions for the Mosquitto client so you do not have to install it manually. Ensure you are in the correct directory &lt;code class=&quot;highlighter-rouge&quot;&gt;mosquitto-client&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker build . -t wott-mqtt-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The key thing this has done is created the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;wott/temperature&lt;/code&gt; which we will be publishing/subscribing to.&lt;/p&gt;

&lt;p&gt;Now, to set up the subscriber in the same terminal instance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export MQTT_SERVER_WOTT_ID=ServerDeviceID.d.wott.local
$ export MQTT_SERVER_IP=Server_inet_IP
$ sudo docker run -ti --rm \
    -e MQTT_SERVER=$MQTT_SERVER_WOTT_ID \
    --add-host $MQTT_SERVER_WOTT_ID:$MQTT_SERVER_IP \
    -v /opt/wott/certs:/opt/wott/certs:ro \
    wott-mqtt-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you do not know your IP address, you can obtain this through &lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr show&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ifconfig&lt;/code&gt; and the value corresponds to the &lt;code class=&quot;highlighter-rouge&quot;&gt;inet&lt;/code&gt; value. Alternatively, you can get the value for the specific port you are using (in this case port 8883) through &lt;code class=&quot;highlighter-rouge&quot;&gt;ip route get 8.8.8.3&lt;/code&gt;. Make sure you do this on your &lt;em&gt;server&lt;/em&gt; device.&lt;/p&gt;

&lt;p&gt;The subscriber should now be running. As there are no messages being published, you will not see anything on the terminal yet. To end the process use &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL + C&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;publishing&quot;&gt;Publishing&lt;/h3&gt;

&lt;p&gt;With the subscriber running, in a new instance of terminal; run the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export MQTT_SERVER_WOTT_ID=ServerDeviceID.d.wott.local
$ export MQTT_SERVER_IP=Server_inet_IP
$ sudo docker run -ti --rm \
    -e MQTT_SERVER=$MQTT_SERVER_WOTT_ID \
    --add-host $MQTT_SERVER_WOTT_ID:$MQTT_SERVER_IP \
    -v /opt/wott/certs:/opt/wott/certs:ro \
    wott-mqtt-client /pub.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will get an output that looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sending temperature 40
Sending temperature 18
Sending temperature 42
Sending temperature 33
Sending temperature 3
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This instance is publishing temperature data to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wott/temperature&lt;/code&gt; topic. To confirm this, check the subscriber terminal window now. If the ACL has been configured correctly, you will see the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wott/temperature 40
wott/temperature 18
wott/temperature 42
wott/temperature 33
wott/temperature 3
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also check the terminal running the server on the server device to see the connections from the client.
And that’s it. You have successfully set up a Mosquitto brokered MQTT server and client.&lt;/p&gt;

&lt;p&gt;To stop the publisher, you will need to stop the Docker container itself, &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL + C&lt;/code&gt; will not work. To do so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker container ps

CONTAINER ID        IMAGE               COMMAND                  [...]
8bfe61edb3bd        wott-mqtt-client    &quot;/pub.sh&quot;                [...]

[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You’re looking for the Docker container that has the same &lt;code class=&quot;highlighter-rouge&quot;&gt;IMAGE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;COMMAND&lt;/code&gt; details as the above as it corresponds to the process containing the publisher. There may also be other containers running such as the subscriber.&lt;/p&gt;

&lt;p&gt;Copy the Container ID of the publisher and run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker stop Container_ID_of_publisher
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This should stop the process. To confirm, just check the terminal with the publisher and it will no longer be publishing data. It may take up to a few seconds.&lt;/p&gt;

&lt;h2 id=&quot;finishing-notes&quot;&gt;Finishing Notes&lt;/h2&gt;

&lt;p&gt;Mosquitto is a very convenient way of managing MQTT messages with inbuilt features that promote security. Hopefully we’ve shown how easy it is to use WoTT to secure a Mosquitto server and client based off our unique ID that we assign to each WoTT device. Ultimately security through identity is the way forward as passwords can still be all too easily intercepted- especially on non TLS connections. ACL files are one of many ways we can use identity over passwords.&lt;/p&gt;

&lt;p&gt;Of course, our example code snippets are just that: an example; so feel free to experiment and augment the code as you see fit. We encourage you to go through our examples and change configurations and files for your needs. There’s much more to Mosquitto than we have included in this example, so check out the &lt;a href=&quot;https://mosquitto.org&quot;&gt;Mosquitto website&lt;/a&gt; for more information.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Using WoTT to Cryptographically Secure Access Between a Mosquitto Brokered MQTT Client and Server</summary></entry><entry><title type="html">Configuring Nginx with client certificate authentication (mTLS)</title><link href="https://wott.io/blog/tutorials/2019/07/15/mtls-with-nginx" rel="alternate" type="text/html" title="Configuring Nginx with client certificate authentication (mTLS)" /><published>2019-07-15T08:00:00+00:00</published><updated>2019-07-15T08:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/07/15/mtls-with-nginx</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/07/15/mtls-with-nginx">&lt;h1 id=&quot;configuring-nginx-with-client-certificate-authentication-mtls&quot;&gt;Configuring Nginx with client certificate authentication (mTLS)&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Required Skill Level&lt;/strong&gt;: Medium to Expert&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to complete&lt;/strong&gt;: 15-20 min&lt;/p&gt;

&lt;p&gt;In this post we will walk through how to configure Nginx to support mutual TLS to authenticate a client request in 3 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install certificate on client&lt;/li&gt;
  &lt;li&gt;Set up a server&lt;/li&gt;
  &lt;li&gt;Whitelist client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the cornerstones of Zero Trust Networking is Mutual TLS (known as mTLS). In simple terms, this means that each client is required to present a certificate to talk to the server. By replacing credentials with certificates, we are able to significantly improve the security (in particular with short-lived certificates, like the ones we offer), while also making the implementation &lt;em&gt;easier&lt;/em&gt; (as it removes the need for API key/credential management).&lt;/p&gt;

&lt;p&gt;In this article we will make this all more concrete by creating a sample implementation. The sample implementation will consist of a simple Python appserver, with an Nginx reverse proxy in front of it. Nginx will reject all connections without a valid certificate, and the appserver will then compare the certificate to a whitelist of devices that are allowed to talk to the server.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A server (Debian VM, Ubuntu VM, etc.)&lt;/li&gt;
  &lt;li&gt;A client node (running on Ubuntu, Debian, Raspbian)&lt;/li&gt;
  &lt;li&gt;The WoTT Agent installed on both the client and server&lt;/li&gt;
  &lt;li&gt;Docker and Docker Compose installed on the server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;Before we begin, we first need to install the WoTT agent on both the server and client(s). You can register for a free account &lt;a href=&quot;https://dash.wott.io/accounts/register/&quot;&gt;here&lt;/a&gt; and find instruction in our &lt;a href=&quot;https://wott.io/documentation/getting-started&quot; target=&quot;_blank&quot;&gt;Getting Started guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have the WoTT agent installed, we need to install both &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/debian/&quot;&gt;Docker CE&lt;/a&gt; and Docker Compose (you can install Docker Compose on a Raspberry Pi by just running &lt;code class=&quot;highlighter-rouge&quot;&gt;apt update &amp;amp;&amp;amp; apt install docker-compose&lt;/code&gt;). We use these to simplify the installation, as we are able to better pin the requirements.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-server&quot;&gt;Setting up the server&lt;/h2&gt;

&lt;p&gt;Let’s start by setting up the server. To save you the time (and potential typos), we have created a sample repo for this, so all you need to do is to clone the repository:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/WoTTsecurity/examples.git
$ cd examples/nginx-with-mtls-and-appserver
$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to Docker and Docker Compose, this is all we need to kick off the demo. The only final thing we need to do is to add the device that we will be connecting &lt;em&gt;from&lt;/em&gt; to the whitelist. You can find out the WoTT Device ID by running &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo wott-agent whoami&lt;/code&gt; on the device you’re connecting from.&lt;/p&gt;

&lt;p&gt;With the Device ID at hand, simply run the following commands on the server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;MyDeviceId.d.wott.local&quot; &amp;gt;&amp;gt; appserver/whitelist.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now fire up the server by simply running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To test the connection from your client, we need to find out two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The IP of the server&lt;/li&gt;
  &lt;li&gt;The WoTT Device ID of the server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-test-the-client&quot;&gt;Let’s test the client&lt;/h2&gt;

&lt;p&gt;Armed with the above information, we can now turn to our trusty old friend &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, let’s try connecting without passing on our certificate:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo curl \
  --cacert /opt/wott/certs/ca.crt \
  --resolve 'MyServerID.d.wott.local:443:a.b.c.d' \
  https://MyServerId.d.wott.local

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;/span&gt;400 No required SSL certificate was sent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;400 Bad Request&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&lt;/span&gt;No required SSL certificate was sent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;&lt;/span&gt;nginx/1.16.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because we have configured Nginx to require an SSL certificate, the server will reject the connection, and you won’t even be able to reach the appserver that we reverse proxy to.&lt;/p&gt;

&lt;p&gt;If we however pass on our certificate (and key), we are able to successfully access the appserver:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo curl \
  --key /opt/wott/certs/client.key \
  --cert /opt/wott/certs/client.crt \
  --cacert /opt/wott/certs/ca.crt \
  --resolve 'MyServerID.d.wott.local:443:a.b.c.d' \
  https://MyServerId.d.wott.local

Access Granted!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;thats-really-cool-but-what-happened-here&quot;&gt;That’s really cool, but what happened here?&lt;/h2&gt;

&lt;p&gt;There’s a lot to unpack in what we did above, so let’s start with the client and work our way forward.&lt;/p&gt;

&lt;h3 id=&quot;client&quot;&gt;Client&lt;/h3&gt;

&lt;p&gt;Let’s break down the &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command we used to successfully connect to the server.&lt;/p&gt;

&lt;p&gt;These two lines tell &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to send the client certificate and key.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  --key /opt/wott/certs/client.key
  --cert /opt/wott/certs/client.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is our cryptographic identity provided by WoTT. In short, this replaces the need for a username and pasword. It should however be said that the key is not sent to the server (unlike a password), but rather it is used for a cryptographic challenge (vastly simplified).&lt;/p&gt;

&lt;p&gt;Next, we need to tell &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to use the WoTT CA certificate to verify the remote server against (since WoTT is not a public CA):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  --cacert /opt/wott/certs/ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we use a neat little feature in &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to tell it to map ‘MyServerID.d.wott.local’ to an IP address. We could instead have added this to our &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file, but this is a quicker workaround when testing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  --resolve 'MyServerID.d.wott.local:443:192.168.X.Y'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;

&lt;p&gt;Let’s move on to Nginx. We use Nginx as a reverse proxy for the appserver that we will cover below. We do this for a few reasons. The first reason is simply because Nginx is battle tested and does the first level of screening. If for instance, the client fails to present a valid certificate, the request will not be forwarded to the appserver. Hence this is a nice safety net from possible bugs in the appserver code.&lt;/p&gt;

&lt;p&gt;In this particular example, we also terminate the TLS connection in Nginx. Should we want to improve security further (and adopt proper Zero Trust Networking), we could encrypt the traffic Nginx and the appserver too (even if they are on the same host in this case).&lt;/p&gt;

&lt;p&gt;If the certificate is valid, Nginx will then reverse proxy the connection to the appserver.&lt;/p&gt;

&lt;p&gt;The Nginx configuration is fairly straight forward and can be found &lt;a href=&quot;https://github.com/WoTTsecurity/examples/blob/master/nginx-with-mtls-and-appserver/nginx/reverse-proxy.conf&quot;&gt;here&lt;/a&gt;. The most noteworthy lines in the configuration are these:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This will return a 403 to all clients without a proper certificate
if ($ssl_client_verify != &quot;SUCCESS&quot;) { return 403; }

# This tells Nginx what CA to verify against
ssl_client_certificate /opt/wott/certs/ca.crt;

# This tells Nginx to verify clients
ssl_verify_client on;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In theory, we could extend this further and write a &lt;a href=&quot;https://github.com/openresty/lua-nginx-module#readme&quot;&gt;LUA script&lt;/a&gt; to do further validation, and even incorporate the whitelisting that we will get to in the appserver section, but that’s something for another day.&lt;/p&gt;

&lt;h3 id=&quot;appserver&quot;&gt;Appserver&lt;/h3&gt;

&lt;p&gt;Assuming the client passed all validations, the request will be passed on to the appsever. The &lt;a href=&quot;https://github.com/WoTTsecurity/examples/blob/master/nginx-with-mtls-and-appserver/appserver/app.py&quot;&gt;appserver&lt;/a&gt; is a simple Flask app. In essence, all it does is to provide some validations on the headers. Since Nginx will pass on various HTTP Headers to the appserver, we can use them to implement access control.&lt;/p&gt;

&lt;p&gt;When a request hits the appserver, it will check the HTTP header &lt;code class=&quot;highlighter-rouge&quot;&gt;Ssl-Client-Verify&lt;/code&gt; is set to ‘SUCCESS’. If it isn’t, the request will be rejected with an error message. In theory, this shouldn’t be possible, since Nginx should never forward such request, but when it comes to security it’s better to be safe than sorry.&lt;/p&gt;

&lt;p&gt;Assuming the above condition is correct, the appserver will parse the Client ID (from the ‘Ssl-Client’ header) and compare it to a whitelist (&lt;code class=&quot;highlighter-rouge&quot;&gt;whitelist.txt&lt;/code&gt; from above). The whitelist is a simple text file with one Device ID per line. Only if the Client ID (i.e. the WoTT Device ID) matches a record in the whitelist, the appserver will return “Access Granted!”.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully you found this tutorial useful in illustrating a cornerstone of Zero Trust Networking - mTLS. With a relatively small amount of code we can implement better security in a real-world setting. For more mTLS use cases or for a better understanding of Trust Scoring in Zero Trust Networking checkout &lt;a href=&quot;https://twitter.com/wottsecurity&quot;&gt;wott.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions, please get in touch with us on &lt;a href=&quot;https://twitter.com/wottsecurity&quot;&gt;Twitter&lt;/a&gt; or open a Github Issue if you found any issues.&lt;/p&gt;</content><author><name>Viktor Petersson</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Configuring Nginx with client certificate authentication (mTLS)</summary></entry><entry><title type="html">Using WoTT credentials to manage access to Adafruit IO feeds</title><link href="https://wott.io/blog/tutorials/2019/06/27/adafruit-io" rel="alternate" type="text/html" title="Using WoTT credentials to manage access to Adafruit IO feeds" /><published>2019-06-27T17:00:00+00:00</published><updated>2019-06-27T17:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/06/27/adafruit-io</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/06/27/adafruit-io">&lt;h1 id=&quot;using-adafruit-io-with-wott-credentials&quot;&gt;Using Adafruit IO with WoTT Credentials&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://io.adafruit.com&quot;&gt;Adafruit IO&lt;/a&gt; is a free cloud service interested in making IoT accessible to everyone through presenting data in a useful and user-friendly way. Services that they provide include linking your IoT devices to Twitter and weather services. You can also use Adafruit IO to monitor and control temperature sensitive devices; or to change the colours of an RGB lightbulb through their user-friendly dashboard. These are just a few examples of how you can utilise Adafruit’s IO.&lt;/p&gt;

&lt;p&gt;We’re interested in Adafruit IO as it provides a means for us to communicate with our IoT devices via messages through either an MQTT or HTTP service. WWe can therefore interact with Adafruit’s services and use our WoTT provided credentials to secure it.&lt;/p&gt;

&lt;p&gt;For this example you will need a device with the WoTT agent installed and a browser. You will also need an Adafruit IO account as well as a WoTT dash account. We will show you to set these up later in the guide if you haven’t done so already.&lt;/p&gt;

&lt;p&gt;This example contains code snippets. To access these, clone our &lt;a href=&quot;https://github.com/WoTTsecurity/examples&quot;&gt;examples&lt;/a&gt; repository by doing the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/WoTTsecurity/examples.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; and download the relevant files. Instructions included for both.&lt;/p&gt;

&lt;h2 id=&quot;installing-and-setting-up-to-use-adafruit-io&quot;&gt;Installing and setting up to use Adafruit IO&lt;/h2&gt;

&lt;p&gt;The first thing you will need to do, is to &lt;a href=&quot;https://accounts.adafruit.com/users/sign_up&quot;&gt;sign up&lt;/a&gt; for Adafruit IO so you can access their &lt;a href=&quot;https://io.adafruit.com/&quot;&gt;dashboard&lt;/a&gt;. Familiarise yourself with their &lt;a href=&quot;https://learn.adafruit.com/series/adafruit-io-basics&quot;&gt;basic guides&lt;/a&gt;. For this example, we will be creating a ‘Feed.’ First however, you will need to have the Adafruit IO client downloaded on your system. We will be using their Python client.&lt;/p&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt update &amp;amp;&amp;amp; apt install -y python3 python3-pip curl
$ pip3 install adafruit-io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we’re all set up, we can create a feed to later call via MQTT.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-feed-for-mqtt-messaging&quot;&gt;Creating a Feed for MQTT messaging&lt;/h2&gt;

&lt;p&gt;Login to the Adafruit IO dashboard. Navigate to the ‘Feeds’ page on the left-hand side menu. Hover over actions and select ‘Create a New Feed.’ The feed acts as a channel or datastream through which your device connects to Adafruit IO. We are going to create a feed that is called via MQTT. In other words, the feed becomes the topic from which messages are published/subscribed to.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;create feed&quot; src=&quot;https://wott.io/assets/blog/adafruit-add-21106ff597b5fe9bca13995f8e116602c02e5371f9d81dc073ab764ee70a132b.png&quot; integrity=&quot;sha256-IRBv9Ze1/pvKE5lfjhFmAsAuU3H52B3Ac6t2TucKEys=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/25fd86-8bed2dab64ed7564ec95a6c2cd7583214b4179a6e5b65ab2ac43d1c7d6bf3b6c.png 2x, https://wott.io/assets/cd12eb-5cc7dd86f66ad4bb789eb751c63c8bef0e22e2e8dbc63f7b60333ff74eb66c90.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The feed name refers to the type of data you are observing- for example temperature or humidity. To keep things simple, we are just going to observe data and name the feed ‘data feed.’ The description is supposed to provide some more in-depth information about the feed. When using sensor data, this is going to be something like temperature or humidity, however for this exmaple we are just dealing with very basic pub/sub messages, so our data type is generic.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;name feed&quot; src=&quot;https://wott.io/assets/blog/feed-details-ea085f388451196a3884b7a0524e4c940bbf75874e5bdcee2de1327703adccc7.png&quot; integrity=&quot;sha256-6ghfOIRRGWo4hLegUk5MlAu/dYdOW9zuLeEydwOtzMc=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/de0189-0ee16eee2b2cebf064363a7a18f19d8ec36b5b2f36797e8e82276e69c36baf5d.png 2x, https://wott.io/assets/60856b-b2d7b470d21124546de64a0722b7238fb64adc22cd0c7fbe3f9dd2d01029f83d.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; it is possible to create the feeds using a simple python application. If you prefer a more codified style of set up, you can follow &lt;a href=&quot;https://adafruit-io-python-client.readthedocs.io/en/latest/feeds.html&quot;&gt;this&lt;/a&gt; guide.&lt;/p&gt;

&lt;h2 id=&quot;creating-credentials-in-wott-dash&quot;&gt;Creating credentials in WoTT dash&lt;/h2&gt;

&lt;p&gt;In order to call the Adafruit API via HTTP access, it requires a key. You can find this key on the left-hand side of your Adafruit dasboard as you did with ‘Feeds’ under &lt;code class=&quot;highlighter-rouge&quot;&gt;AIO key&lt;/code&gt;. You will be brought to a page akin to this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;AIO key&quot; src=&quot;https://wott.io/assets/blog/aio-key-modal-f866f82bdffa097d3781bfcf79bf1f305b9d7854d84fcbd0c9321d6d29f0ef65.png&quot; integrity=&quot;sha256-+Gb4K9/6CX03gb/Peb8fMFudeFTYT8vQyTIdbSnw72U=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/9d26f5-f0b6a966b44c759304c732a155355cb093bea88082dfb637f5d140e21dd073ea.png 2x, https://wott.io/assets/953c52-074ec88e92b295f0791ffa3f3309ccc1376fac9b0c1a149b89a20fc4109a89dc.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are your unique Adafruit details. We can add these to WoTT’s dashboard as a new credential where the value is your personal username followed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Active Key&lt;/code&gt; value. To do so, you will need to login or create an account for the &lt;a href=&quot;https://dash.wott.io&quot;&gt;WoTT dash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;WoTT login&quot; src=&quot;https://wott.io/assets/blog/wott-dash-212c3643e41361a1a771dc7435ae6b12c4f1afde0f8b56a437175997adf118e2.png&quot; integrity=&quot;sha256-ISw2Q+QTYaGncdx0Na5rEsTxr94Pi1akNxdZl63xGOI=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/03bed4-b27b6a1fc58afad3dca856fc1635858796b6b1d50e5492fba65a00622cd80ac6.png 2x, https://wott.io/assets/deedd0-a4b73702759167b70d32a66cc1e979a0e0c5767ed8933fe53d102606cf35013a.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you already have the WoTT dash and have registered your devices, you can skip ahead to inputting the credentials of the device. Otherwise, register your WoTT agent device to the dash by obtaining the Device ID and Claim Token by doing the following commands on said device:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wott-agent whoami
$ sudo wott-aget claim-token
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and pasting the output into the ‘Claim Device’ segment of the WoTT dash. This device is now claimed and registered to the WoTT dash. You can view the list of your claimed devices on the main dashboard. Navigate to your newly registered device and add a new tag, &lt;code class=&quot;highlighter-rouge&quot;&gt;adafruit&lt;/code&gt; to it. Through these tags, WoTT identifies which devices specific credentials are intended for.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Adafruit tags&quot; src=&quot;https://wott.io/assets/blog/adafruit-tags-4c74ebb36ad6e163a778f7a8db3049666a631c012c7736a7bdeed264a3ce850b.png&quot; integrity=&quot;sha256-THTrs2rW4WOnePeo2zBJZmpjHAEsdzanve7SZKPOhQs=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/378d39-a68e6c4193dbae73d1f371c2fd677c905b408e0c93693c501d07dfc432035bde.png 2x, https://wott.io/assets/7d7aaa-a49df9ac44983e580b72150ddf1a71efce387ec67490e023061773907e0a0b62.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we are all set up, we need to create the credentials with the Adafruit information. Navigate to the ‘Credentials’ page of the WoTT dash and a new credential. Input the following into the fields:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = adafruit_aio
Key = credentials
Value = username:key
Tags = adafruit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;using your relevant information from the Adafruit AIO key.
Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;adafruit&lt;/code&gt; tag here. Ensure that the device you will be downloading the credentials on has a matching tag.&lt;/p&gt;

&lt;p&gt;To download the credential, restart the WoTT Agent by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service wott-agent restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There will now be a JSON file on your system containing your credentials.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-adafruit-feed-sharing-with-an-mqtt-client&quot;&gt;Setting up Adafruit feed sharing with an MQTT Client&lt;/h2&gt;

&lt;p&gt;We have included a modified example of the Adafruit feed sharing tutorial in this guide which utilises WoTT’s credentials rather than hard coding your details into the application. To run the example using &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir ~/wott-adafruit-mqtt-example
$ cd ~/wott-adafruit-mqtt-example
$ curl -o mqtt_shared_feeds.py https://raw.githubusercontent.com/WoTTsecurity/examples/master/adafruit-io/mqtt_shared_feeds.py
$ sudo python3 mqtt_shared_feeds.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have our repository cloned instead, navigate to the examples directory and do the following instead:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd adafruit-io
$ sudo python3 mqtt_shared_feeds.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are successful, you should receive a message like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Publishing a new message every 10 seconds (press Ctrl-C to quit)...
Publishing 96 to data feed
Connected to Adafruit IO!
Publishing 12 to data feed
Feed data feed received new value: 12
Publishing 52 to data feed
Feed data feed received new value: 52
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On your Adafruit IO dash, you should see the data being received on your feed:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;feed data&quot; src=&quot;https://wott.io/assets/blog/adafruit-feed-88cdb8ceb9f8c0820123a6ad3b8bad5e382b73d05d35034e0ca678a2f273033e.png&quot; integrity=&quot;sha256-iM24zrn4wIIBI6atO4utXjgrc9BdNQNODKZ4ovJzAz4=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/13d874-1bc9f6329b947cca15a3210afc5d65b19d9047b842cd6b61dc3cff3d816146a3.png 2x, https://wott.io/assets/861588-52346328ef0a1f873bf963c2c4fbce6a8a6f2fdd7f85dcde0bfeccaab6cd418b.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; your values will be different to this example as they are randomly generated, use the above as a reference point only.&lt;/p&gt;

&lt;h2 id=&quot;common-errors&quot;&gt;Common errors&lt;/h2&gt;

&lt;p&gt;Adafruit IO Python uses Python 3. If you have both a version of Python 2 and Python 3 on your machine, you will need to use the appropriate commands (for example pip vs pip3).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No module named Adafruit_IO&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;File &quot;/Users/user/dir/app_dir/mqtt_shared_feeds.py&quot;, line 10, in &amp;lt;module&amp;gt;
    from Adafruit_IO import  MQTTClient
ImportError: No module named Adafruit_IO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This happens when Adafruit IO is not installed correctly. The reccommended fix is to &lt;a href=&quot;https://github.com/adafruit/Adafruit_IO_Python&quot;&gt;manually install&lt;/a&gt; Adafruit IO into the directory that you are working in (&lt;code class=&quot;highlighter-rouge&quot;&gt;wott-adafruit-mqtt-example&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;closing-notes&quot;&gt;Closing notes&lt;/h2&gt;

&lt;p&gt;We have successfully used WoTT credentials to secure access to your Adafruit IO feed through an MQTT client!&lt;/p&gt;

&lt;p&gt;The Python application contained in this example is a modified version of Adafruit IO’s own MQTT feed sharing example. Feel free to edit, play with, and modify the app as you choose. Note that if you make changes to feed names, feed owners, etc; you will have to change this within the app (or within WoTT credentials to be more secure).&lt;/p&gt;

&lt;p&gt;Ensure that if you do add additional credentials to WoTT dashboard that you restart the WoTT agent to download the credentials immediately- otherwise WoTT will fetch the information every 15 minutes.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Using Adafruit IO with WoTT Credentials</summary></entry><entry><title type="html">Using WoTT credentials to manage access to Screenly OSE</title><link href="https://wott.io/blog/tutorials/2019/06/25/screenly-ose" rel="alternate" type="text/html" title="Using WoTT credentials to manage access to Screenly OSE" /><published>2019-06-25T17:00:00+00:00</published><updated>2019-06-25T17:00:00+00:00</updated><id>https://wott.io/blog/tutorials/2019/06/25/screenly-ose</id><content type="html" xml:base="https://wott.io/blog/tutorials/2019/06/25/screenly-ose">&lt;h1 id=&quot;using-wott-to-secure-access-to-screenly&quot;&gt;Using WoTT to secure access to Screenly&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Screenly is a service that provides digital signage and acts as an OS on the host device. Essentially it treats your host device as a streaming service that projects visual media (such as images and webpages) onto a monitor from multiple different sources. Think of it as a manager for your visual media- you send the content via a browser on the Screenly management page, and the host device projects that content onto a monitor.&lt;/p&gt;

&lt;p&gt;Screenly by default allows anyone within the network with the management page IP address to access it and send content. However, it does also provide HTTP authentication- and we can use WoTT’s credentials to secure our Screenly device so that we can restrict and verify those who have access to it.&lt;/p&gt;

&lt;p&gt;Screenly offers a free OSE version that you can use. For this example you will need a Raspberry Pi, a monitor for Screenly to project onto; and at least one browser device. You will also need to have an account for the &lt;a href=&quot;https://dash.wott.io&quot;&gt;WoTT Dashboard&lt;/a&gt; in order to manage WoTT credentials.&lt;/p&gt;

&lt;h2 id=&quot;installing-wott-agent-on-screenly-ose&quot;&gt;Installing WoTT agent on Screenly OSE&lt;/h2&gt;

&lt;p&gt;First you will need a Screenly OSE (the free version) device if you do not already.
Follow the instructions to install Screenly OSE on your Raspberry Pi &lt;a href=&quot;https://www.screenly.io/ose/&quot;&gt;here&lt;/a&gt;. We reccommend you follow the first option and use something like Etcher to flash the SD card with the Screenly OSE disk image. 
&lt;strong&gt;Note:&lt;/strong&gt; Screenly OSE will overwrite your OS.&lt;/p&gt;

&lt;p&gt;When the Raspberry Pi reboots, it will take you to the Screenly OSE network configuration. You will need to access the SSID as you would a wifi network and enter the password shown.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Screenly&quot; src=&quot;https://wott.io/assets/blog/screenly-setup-520903a934667ee4f2dfedbe9568ea6c39d43f746b7b3348cde4ba924e11044f.jpg&quot; integrity=&quot;sha256-UgkDqTRmfuTy3+2+lWjqbDnUP3RrezNIzeS6kk4RBE8=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/1629a1-fa3f27f61fb7671c9866eb3cb85bc2ae27884052fe23a7f56e968916ab44f2ff.jpg 2x, https://wott.io/assets/c8eb7f-c1f3af339c3ab5b9027e6d4a043ffb6f1a022fc8e049a8496547beb17c2a7c4c.jpg 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then navigate to the Address shown and login with your network details. This will grant you access to the Screenly management page.&lt;/p&gt;

&lt;p&gt;Now we need to secure access to your Screenly OSE device. If you haven’t installed the WoTT Agent already, you can install it via the Screenly OSE installer. Just run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./screenly/bin/run-upgrade.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and select the WoTT agent from the installation options.&lt;/p&gt;

&lt;p&gt;To do this on the Screenly OSE device, you need to access the terminal through &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;ALT&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;F1&lt;/code&gt;. To return back to the GUI, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;ALT&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;F2&lt;/code&gt;. 
Once here, follow the WoTT agent installation as you would on any other device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; If you want to avoid using the terminal directly on your Screenly OSE device in the future, enable SSH through the &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo raspi-config&lt;/code&gt; command. It is also reccommended that you change your Password from the default &lt;code class=&quot;highlighter-rouge&quot;&gt;raspberry&lt;/code&gt; (this will also improve your WoTT security score!) if you are going to do this.&lt;/p&gt;

&lt;p&gt;You will now need to register the Pi on the WoTT dashboard.&lt;/p&gt;

&lt;h2 id=&quot;downloading-wott-credentials-on-screenly-ose&quot;&gt;Downloading WoTT credentials on Screenly OSE&lt;/h2&gt;

&lt;p&gt;Login to the WoTT Dash and navigate to ‘Claim Device.’ If you have installed the WoTT agent recently, the relevant information should be displayed on your terminal screen. If not, use the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wott-agent whoami
$ sudo wott-aget claim-token
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will give you your Device ID and the token value to claim your device.&lt;/p&gt;

&lt;p&gt;Your Raspberry Pi should now be registered. Navigate to your Dashboard and select the Pi:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Pi&quot; src=&quot;https://wott.io/assets/blog/rasbpi-a8999635cf9b0dc73388bffed4197bb2b0d92fb778198160c6f6e01d674e02dc.png&quot; integrity=&quot;sha256-qJmWNc+bDccziL/+1Bl7srDZL7d4GYFgxvbgHWdOAtw=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/e711ef-d95e48de556970038ff22507554ec1e4a6d73c1957ce229d1af4ad7f97b0b667.png 2x, https://wott.io/assets/d66040-753e0d11dcd9537c04a649f011ce4cd2a0ed30d5d0d4d36794cb2668be1a64df.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the overview page, add a tag. This will be important for the credentials. This tag can be whatever you want, however we suggest something like &lt;code class=&quot;highlighter-rouge&quot;&gt;screenly-pi&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt; or a variant of that form:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;tag&quot; src=&quot;https://wott.io/assets/blog/tag-0174bc7f6a95922cc4554c994d2bf6f313661bd5d9ee7913a4a36ce883db0a10.png&quot; integrity=&quot;sha256-AXS8f2qVkizEVUyZTSv28xNmG9XZ7nkTpKNs6IPbChA=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/c5a555-6aa527cd2f9de497689832594352853a23a60192b1537c6d39a6bf9779a9ad81.png 2x, https://wott.io/assets/6b3f4b-f93273fe6fe60da297f325aea5f42eb2cf1b6d823e42f62664d095bb3006ec78.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now navigate to credentials and add a new credential with the following details:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name = screenly
Key = login
Value = username:password
Owner = pi
Tags = screenly-pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where the Owner must be the Linux user running Screenly (so by default on a Raspberry Pi, &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt;) and Key must be &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt; (or the credentials won’t be read). Value is the actual username and password of the login denoted by the single field &lt;code class=&quot;highlighter-rouge&quot;&gt;username:password&lt;/code&gt;. You can change this value to match your own criteria, but it’s fine for this example to leave it as is. Make sure as well that the Tags match whatever Tags you assigned the Pi earlier. The Name should be left as &lt;code class=&quot;highlighter-rouge&quot;&gt;screenly&lt;/code&gt; as this is how the config calls the credentials.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the config is automatically edited with the WoTT authentication details. You can change the Name value of &lt;code class=&quot;highlighter-rouge&quot;&gt;screenly&lt;/code&gt; if you wish, but note that this is how Screenly OSE will call WoTT’s credential information. So if you do change this name, then you will have to manually change the config file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.screenly/screenly.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your credentials are now all set up. To download them onto the device, you will need to restart the WoTT Agent and the Screenly OSE server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service wott-agent restart
$ sudo service screenly-web restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There will now be a file on your Pi &lt;code class=&quot;highlighter-rouge&quot;&gt;screenly.json&lt;/code&gt;. 
&lt;strong&gt;Note:&lt;/strong&gt; it may take a few minutes for this to appear- especially on older Pi models,&lt;/p&gt;

&lt;p&gt;You can check the file exists by running the following command (if your user is &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /opt/wott/credentials/pi/screenly.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the certificate is downloaded, you should receive a response like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;screenly&quot;: &quot;username:password&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;securing-screenly-ose-management-page-access-with-wott-credentials&quot;&gt;Securing Screenly OSE management page access with WoTT credentials&lt;/h2&gt;

&lt;p&gt;You will now need to navigate to the Screenly OSE management page. This is the IP address displayed on the front of the Screenly OSE device (or is the &lt;code class=&quot;highlighter-rouge&quot;&gt;inet&lt;/code&gt; address when running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; in the device’s terminal).&lt;/p&gt;

&lt;p&gt;Navigate to Settings:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Settings&quot; src=&quot;https://wott.io/assets/blog/screenly-schedule-939edcd959981451d7d13e85f3a6e8ba754fb03e94e68add5ece158b26a44297.png&quot; integrity=&quot;sha256-k57c2VmYFFHX0T6F86bounVPsD6U5ordXs4ViyakQpc=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/35f1a7-62b4bac92cd3d2374e50ba6986f464b33ea365111309cfca76eee2bafdcf01e2.png 2x, https://wott.io/assets/c82378-ee369b548fb350a0463a592d1b4796199ea34f36e1414cf8f73d5866cc0b4273.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll down the page and underneath ‘Authentication’ select ‘WoTT’ and save your settings.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;WoTT&quot; src=&quot;https://wott.io/assets/blog/screenly-wott-290945dab512182479adf0eaf98e858557e109489005924fcb60c6460d7b0488.png&quot; integrity=&quot;sha256-KQlF2rUSGCR5rfDq+Y6FhVfhCUiQBZJPy2DGRg17BIg=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/561ae0-778318765d486e4844886ded3f7ae78f0fd8f85c6ee85115fa71b01eccbca0ca.png 2x, https://wott.io/assets/052172-94eafaaa893509ac99f487d91f05549e207ca3459582af1e29f8f506248a1489.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have now enabled the WoTT credentials on Screenly OSE. Test this out by trying to access the management page from another browser (the image example below is opened in Chrome) and you will be required to login with the credentials you specified above (in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Chrome&quot; src=&quot;https://wott.io/assets/blog/screenly-chrome-6dc710c2193e7bfe0387c3ba3c5ac842c3ca7c90766529757f93ab034afed64f.png&quot; integrity=&quot;sha256-bccQwhk+e/4Dh8O6PFrIQsPKfJB2ZSl1f5OrA0r+1k8=&quot; crossorigin=&quot;anonymous&quot; srcset=&quot;https://wott.io/assets/3fdef5-190ae074ee65c31416fbab372ef22640e11b32098082420defea00655b12f569.png 2x, https://wott.io/assets/c39b7a-411b3acf7ca7393ecf7e8013ca8c52db40ec73cbf25ce7f9d44d7848e21c3fd2.png 1x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your credentials are correct, you will be successfully logged into the main Screenly management page and greeted by the Schedule Overview.&lt;/p&gt;

&lt;h2 id=&quot;closing-notes&quot;&gt;Closing Notes&lt;/h2&gt;

&lt;p&gt;You may be denied access in some of the terminal instances- to resolve this, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; command where necessary.&lt;/p&gt;

&lt;p&gt;You can change the WoTT credentials as you wish, but note that data is fetched by &lt;code class=&quot;highlighter-rouge&quot;&gt;wott-agent service&lt;/code&gt; every 15 minutes, so for access to any immediate changes you implement you will need to restart the WoTT agent and server as before using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service wott-agent restart
$ sudo service screenly-web restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And that’s it, you have successfully used WoTT credentials to set up authentication for Screenly OSE.&lt;/p&gt;</content><author><name>Fiona McAllister</name></author><category term="tutorials" /><category term="Open Source" /><summary type="html">Using WoTT to secure access to Screenly</summary></entry></feed>